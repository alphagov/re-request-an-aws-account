#!/usr/bin/env ruby

require 'aws-sdk-s3'
require 'csv'
require 'slop'

# key value pair mapping from headers in the ingested csv file to the headers required by the application.
# if required headers are not found adjust the keys to match the updated headers in the new file.
mapping = {
  "Cost Centre Description" => "Cost Centre Description", #eg "SOME TEAM"
  "Cost Centre" => "Cost Centre", #eg "12345678"
  "Level 04 Parent Descr" => "Business Unit", #eg "OU - SOME GROUP"
  "Level 05 Parent Descr" => "Subsection" #eg "SOME GROUP/UNIT/OFFICE/DIVISION/PROGRAMME/STREAM"
}

puts "Running csv updater"

options = Slop.parse do |opts|
  opts.string '-b', '--bucket', 'Specify the bucket eg. \"cope-request-aws-account-staging-csv\"' 
  opts.string '-f', '--file-path', 'Specify the file path eg. \"./my-csv-file.csv\"'
end

if options[:bucket].nil? or options[:'file-path'].nil?
  puts "Required fields missing:"
  puts options
  exit(1)
end

bucket_name = options[:bucket]
file_path = options[:'file-path']


def validate_csv_format(csv_file_headers, mapping)
  required_headers = mapping.keys
  is_valid = required_headers.all? { |header| csv_file_headers.include?(header)}
  if not is_valid
    STDERR.puts "The required headers: #{required_headers} are not present in the csv file. Please update the mapping in this script and re-run it to continue"   
  else
    puts "The file is in valid a format"
  end
  is_valid
end

def upload_to_s3(csv, bucket)
  s3 = Aws::S3::Client.new

  begin
      s3.put_object(
      body: csv,
      bucket: bucket,
      key: "cost_centres.csv"
      )
      puts "Successfully uploaded file"
  rescue Aws::S3::Errors::ServiceError => error
      STDERR.puts "File not uploaded: #{error.message}"
  end
end

def map_csv_headers(csv, mapping)
  CSV.generate do | out_csv |
    out_csv << mapping.values

    CSV.foreach(csv, headers: true) do |in_row|
      out_row = []
      mapping.each do |old_header, new_header|
        out_row.append(in_row[old_header])
      end
      out_csv << out_row
    end
  end
end

if validate_csv_format(CSV.open(file_path, 'r').first, mapping)
  mapped_csv = map_csv_headers(file_path, mapping)
  upload_to_s3(mapped_csv, bucket_name)
  exit 0
end
exit 1